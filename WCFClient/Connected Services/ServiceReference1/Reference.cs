//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationModuleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class ApplicationModuleInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.ApplicationInfo ApplicationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.ModuleInfo[] ModuleInfosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.ApplicationInfo ApplicationInfo {
            get {
                return this.ApplicationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationInfoField, value) != true)) {
                    this.ApplicationInfoField = value;
                    this.RaisePropertyChanged("ApplicationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.ModuleInfo[] ModuleInfos {
            get {
                return this.ModuleInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleInfosField, value) != true)) {
                    this.ModuleInfosField = value;
                    this.RaisePropertyChanged("ModuleInfos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class ApplicationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ApplicationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ApplicationID {
            get {
                return this.ApplicationIDField;
            }
            set {
                if ((this.ApplicationIDField.Equals(value) != true)) {
                    this.ApplicationIDField = value;
                    this.RaisePropertyChanged("ApplicationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class ModuleInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanUnApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FuncationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasUnderlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModuleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval {
            get {
                return this.CanApprovalField;
            }
            set {
                if ((this.CanApprovalField.Equals(value) != true)) {
                    this.CanApprovalField = value;
                    this.RaisePropertyChanged("CanApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate {
            get {
                return this.CanCreateField;
            }
            set {
                if ((this.CanCreateField.Equals(value) != true)) {
                    this.CanCreateField = value;
                    this.RaisePropertyChanged("CanCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify {
            get {
                return this.CanModifyField;
            }
            set {
                if ((this.CanModifyField.Equals(value) != true)) {
                    this.CanModifyField = value;
                    this.RaisePropertyChanged("CanModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1 {
            get {
                return this.CanOther1Field;
            }
            set {
                if ((this.CanOther1Field.Equals(value) != true)) {
                    this.CanOther1Field = value;
                    this.RaisePropertyChanged("CanOther1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2 {
            get {
                return this.CanOther2Field;
            }
            set {
                if ((this.CanOther2Field.Equals(value) != true)) {
                    this.CanOther2Field = value;
                    this.RaisePropertyChanged("CanOther2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3 {
            get {
                return this.CanOther3Field;
            }
            set {
                if ((this.CanOther3Field.Equals(value) != true)) {
                    this.CanOther3Field = value;
                    this.RaisePropertyChanged("CanOther3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery {
            get {
                return this.CanQueryField;
            }
            set {
                if ((this.CanQueryField.Equals(value) != true)) {
                    this.CanQueryField = value;
                    this.RaisePropertyChanged("CanQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval {
            get {
                return this.CanUnApprovalField;
            }
            set {
                if ((this.CanUnApprovalField.Equals(value) != true)) {
                    this.CanUnApprovalField = value;
                    this.RaisePropertyChanged("CanUnApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FuncationName {
            get {
                return this.FuncationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FuncationNameField, value) != true)) {
                    this.FuncationNameField = value;
                    this.RaisePropertyChanged("FuncationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasUnderline {
            get {
                return this.HasUnderlineField;
            }
            set {
                if ((this.HasUnderlineField.Equals(value) != true)) {
                    this.HasUnderlineField = value;
                    this.RaisePropertyChanged("HasUnderline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClose {
            get {
                return this.IsCloseField;
            }
            set {
                if ((this.IsCloseField.Equals(value) != true)) {
                    this.IsCloseField = value;
                    this.RaisePropertyChanged("IsClose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName {
            get {
                return this.MenuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuNameField, value) != true)) {
                    this.MenuNameField = value;
                    this.RaisePropertyChanged("MenuName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID {
            get {
                return this.ModuleIDField;
            }
            set {
                if ((this.ModuleIDField.Equals(value) != true)) {
                    this.ModuleIDField = value;
                    this.RaisePropertyChanged("ModuleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class RoleInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCloseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LEVELSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClose {
            get {
                return this.IsCloseField;
            }
            set {
                if ((this.IsCloseField.Equals(value) != true)) {
                    this.IsCloseField = value;
                    this.RaisePropertyChanged("IsClose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LEVELS {
            get {
                return this.LEVELSField;
            }
            set {
                if ((this.LEVELSField.Equals(value) != true)) {
                    this.LEVELSField = value;
                    this.RaisePropertyChanged("LEVELS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RolePermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class RolePermissionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.PermissionInfo[] PermissionInfosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.RoleDetailInfo RoleDetailInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.PermissionInfo[] PermissionInfos {
            get {
                return this.PermissionInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.PermissionInfosField, value) != true)) {
                    this.PermissionInfosField = value;
                    this.RaisePropertyChanged("PermissionInfos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.RoleDetailInfo RoleDetailInfo {
            get {
                return this.RoleDetailInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailInfoField, value) != true)) {
                    this.RoleDetailInfoField = value;
                    this.RaisePropertyChanged("RoleDetailInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleDetailInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class RoleDetailInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.CompanyInfo CompanyInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.DepartmentInfo DepartmentInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.GroupInfo GroupInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.RoleInfo RoleInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.CompanyInfo CompanyInfo {
            get {
                return this.CompanyInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyInfoField, value) != true)) {
                    this.CompanyInfoField = value;
                    this.RaisePropertyChanged("CompanyInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.DepartmentInfo DepartmentInfo {
            get {
                return this.DepartmentInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentInfoField, value) != true)) {
                    this.DepartmentInfoField = value;
                    this.RaisePropertyChanged("DepartmentInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.GroupInfo GroupInfo {
            get {
                return this.GroupInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupInfoField, value) != true)) {
                    this.GroupInfoField = value;
                    this.RaisePropertyChanged("GroupInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID {
            get {
                return this.RoleDetailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailIDField, value) != true)) {
                    this.RoleDetailIDField = value;
                    this.RaisePropertyChanged("RoleDetailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName {
            get {
                return this.RoleDetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailNameField, value) != true)) {
                    this.RoleDetailNameField = value;
                    this.RaisePropertyChanged("RoleDetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.RoleInfo RoleInfo {
            get {
                return this.RoleInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleInfoField, value) != true)) {
                    this.RoleInfoField = value;
                    this.RaisePropertyChanged("RoleInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class PermissionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AppIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanUnApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanOther1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanOther2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanOther3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasCanUnApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModuleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PermssionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AppID {
            get {
                return this.AppIDField;
            }
            set {
                if ((this.AppIDField.Equals(value) != true)) {
                    this.AppIDField = value;
                    this.RaisePropertyChanged("AppID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppName {
            get {
                return this.AppNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AppNameField, value) != true)) {
                    this.AppNameField = value;
                    this.RaisePropertyChanged("AppName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval {
            get {
                return this.CanApprovalField;
            }
            set {
                if ((this.CanApprovalField.Equals(value) != true)) {
                    this.CanApprovalField = value;
                    this.RaisePropertyChanged("CanApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate {
            get {
                return this.CanCreateField;
            }
            set {
                if ((this.CanCreateField.Equals(value) != true)) {
                    this.CanCreateField = value;
                    this.RaisePropertyChanged("CanCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify {
            get {
                return this.CanModifyField;
            }
            set {
                if ((this.CanModifyField.Equals(value) != true)) {
                    this.CanModifyField = value;
                    this.RaisePropertyChanged("CanModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1 {
            get {
                return this.CanOther1Field;
            }
            set {
                if ((this.CanOther1Field.Equals(value) != true)) {
                    this.CanOther1Field = value;
                    this.RaisePropertyChanged("CanOther1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2 {
            get {
                return this.CanOther2Field;
            }
            set {
                if ((this.CanOther2Field.Equals(value) != true)) {
                    this.CanOther2Field = value;
                    this.RaisePropertyChanged("CanOther2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3 {
            get {
                return this.CanOther3Field;
            }
            set {
                if ((this.CanOther3Field.Equals(value) != true)) {
                    this.CanOther3Field = value;
                    this.RaisePropertyChanged("CanOther3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery {
            get {
                return this.CanQueryField;
            }
            set {
                if ((this.CanQueryField.Equals(value) != true)) {
                    this.CanQueryField = value;
                    this.RaisePropertyChanged("CanQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval {
            get {
                return this.CanUnApprovalField;
            }
            set {
                if ((this.CanUnApprovalField.Equals(value) != true)) {
                    this.CanUnApprovalField = value;
                    this.RaisePropertyChanged("CanUnApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanApproval {
            get {
                return this.HasCanApprovalField;
            }
            set {
                if ((this.HasCanApprovalField.Equals(value) != true)) {
                    this.HasCanApprovalField = value;
                    this.RaisePropertyChanged("HasCanApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanCreate {
            get {
                return this.HasCanCreateField;
            }
            set {
                if ((this.HasCanCreateField.Equals(value) != true)) {
                    this.HasCanCreateField = value;
                    this.RaisePropertyChanged("HasCanCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanDelete {
            get {
                return this.HasCanDeleteField;
            }
            set {
                if ((this.HasCanDeleteField.Equals(value) != true)) {
                    this.HasCanDeleteField = value;
                    this.RaisePropertyChanged("HasCanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanModify {
            get {
                return this.HasCanModifyField;
            }
            set {
                if ((this.HasCanModifyField.Equals(value) != true)) {
                    this.HasCanModifyField = value;
                    this.RaisePropertyChanged("HasCanModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther1 {
            get {
                return this.HasCanOther1Field;
            }
            set {
                if ((this.HasCanOther1Field.Equals(value) != true)) {
                    this.HasCanOther1Field = value;
                    this.RaisePropertyChanged("HasCanOther1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther2 {
            get {
                return this.HasCanOther2Field;
            }
            set {
                if ((this.HasCanOther2Field.Equals(value) != true)) {
                    this.HasCanOther2Field = value;
                    this.RaisePropertyChanged("HasCanOther2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanOther3 {
            get {
                return this.HasCanOther3Field;
            }
            set {
                if ((this.HasCanOther3Field.Equals(value) != true)) {
                    this.HasCanOther3Field = value;
                    this.RaisePropertyChanged("HasCanOther3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanQuery {
            get {
                return this.HasCanQueryField;
            }
            set {
                if ((this.HasCanQueryField.Equals(value) != true)) {
                    this.HasCanQueryField = value;
                    this.RaisePropertyChanged("HasCanQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCanUnApproval {
            get {
                return this.HasCanUnApprovalField;
            }
            set {
                if ((this.HasCanUnApprovalField.Equals(value) != true)) {
                    this.HasCanUnApprovalField = value;
                    this.RaisePropertyChanged("HasCanUnApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID {
            get {
                return this.ModuleIDField;
            }
            set {
                if ((this.ModuleIDField.Equals(value) != true)) {
                    this.ModuleIDField = value;
                    this.RaisePropertyChanged("ModuleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName {
            get {
                return this.ModuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleNameField, value) != true)) {
                    this.ModuleNameField = value;
                    this.RaisePropertyChanged("ModuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermssionID {
            get {
                return this.PermssionIDField;
            }
            set {
                if ((this.PermssionIDField.Equals(value) != true)) {
                    this.PermssionIDField = value;
                    this.RaisePropertyChanged("PermssionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID {
            get {
                return this.RoleDetailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailIDField, value) != true)) {
                    this.RoleDetailIDField = value;
                    this.RaisePropertyChanged("RoleDetailID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class CompanyInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RDSLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RdsCompanyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RdsDatabaseParaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.CompanyInfo.TypeValue TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UFDataLinkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompany {
            get {
                return this.IsCompanyField;
            }
            set {
                if ((this.IsCompanyField.Equals(value) != true)) {
                    this.IsCompanyField = value;
                    this.RaisePropertyChanged("IsCompany");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RDSLink {
            get {
                return this.RDSLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.RDSLinkField, value) != true)) {
                    this.RDSLinkField = value;
                    this.RaisePropertyChanged("RDSLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RdsCompanyCode {
            get {
                return this.RdsCompanyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RdsCompanyCodeField, value) != true)) {
                    this.RdsCompanyCodeField = value;
                    this.RaisePropertyChanged("RdsCompanyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RdsDatabasePara {
            get {
                return this.RdsDatabaseParaField;
            }
            set {
                if ((object.ReferenceEquals(this.RdsDatabaseParaField, value) != true)) {
                    this.RdsDatabaseParaField = value;
                    this.RaisePropertyChanged("RdsDatabasePara");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.CompanyInfo.TypeValue Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UFDataLink {
            get {
                return this.UFDataLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.UFDataLinkField, value) != true)) {
                    this.UFDataLinkField = value;
                    this.RaisePropertyChanged("UFDataLink");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="CompanyInfo.TypeValue", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum TypeValue : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            不明 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            分公司 = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            代理商 = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class DepartmentInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeptIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID {
            get {
                return this.DeptIDField;
            }
            set {
                if ((this.DeptIDField.Equals(value) != true)) {
                    this.DeptIDField = value;
                    this.RaisePropertyChanged("DeptID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class GroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RDSLinkCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RDSLinkCode {
            get {
                return this.RDSLinkCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RDSLinkCodeField, value) != true)) {
                    this.RDSLinkCodeField = value;
                    this.RaisePropertyChanged("RDSLinkCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class UserPermissionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.UserRoleInfo[] UserRoleListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.UserRoleInfo[] UserRoleList {
            get {
                return this.UserRoleListField;
            }
            set {
                if ((object.ReferenceEquals(this.UserRoleListField, value) != true)) {
                    this.UserRoleListField = value;
                    this.RaisePropertyChanged("UserRoleList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRoleInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class UserRoleInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeptIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProxeyedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserRoleIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept {
            get {
                return this.DeptField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptField, value) != true)) {
                    this.DeptField = value;
                    this.RaisePropertyChanged("Dept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID {
            get {
                return this.DeptIDField;
            }
            set {
                if ((this.DeptIDField.Equals(value) != true)) {
                    this.DeptIDField = value;
                    this.RaisePropertyChanged("DeptID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxeyedUser {
            get {
                return this.ProxeyedUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ProxeyedUserField, value) != true)) {
                    this.ProxeyedUserField = value;
                    this.RaisePropertyChanged("ProxeyedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID {
            get {
                return this.RoleDetailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailIDField, value) != true)) {
                    this.RoleDetailIDField = value;
                    this.RaisePropertyChanged("RoleDetailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName {
            get {
                return this.RoleDetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailNameField, value) != true)) {
                    this.RoleDetailNameField = value;
                    this.RaisePropertyChanged("RoleDetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserRoleID {
            get {
                return this.UserRoleIDField;
            }
            set {
                if ((this.UserRoleIDField.Equals(value) != true)) {
                    this.UserRoleIDField = value;
                    this.RaisePropertyChanged("UserRoleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProxyInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class ProxyInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanUnApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreateUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeptIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModuleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProxyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProxyUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProxyedUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleDetailNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval {
            get {
                return this.CanApprovalField;
            }
            set {
                if ((this.CanApprovalField.Equals(value) != true)) {
                    this.CanApprovalField = value;
                    this.RaisePropertyChanged("CanApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate {
            get {
                return this.CanCreateField;
            }
            set {
                if ((this.CanCreateField.Equals(value) != true)) {
                    this.CanCreateField = value;
                    this.RaisePropertyChanged("CanCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify {
            get {
                return this.CanModifyField;
            }
            set {
                if ((this.CanModifyField.Equals(value) != true)) {
                    this.CanModifyField = value;
                    this.RaisePropertyChanged("CanModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1 {
            get {
                return this.CanOther1Field;
            }
            set {
                if ((this.CanOther1Field.Equals(value) != true)) {
                    this.CanOther1Field = value;
                    this.RaisePropertyChanged("CanOther1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2 {
            get {
                return this.CanOther2Field;
            }
            set {
                if ((this.CanOther2Field.Equals(value) != true)) {
                    this.CanOther2Field = value;
                    this.RaisePropertyChanged("CanOther2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3 {
            get {
                return this.CanOther3Field;
            }
            set {
                if ((this.CanOther3Field.Equals(value) != true)) {
                    this.CanOther3Field = value;
                    this.RaisePropertyChanged("CanOther3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery {
            get {
                return this.CanQueryField;
            }
            set {
                if ((this.CanQueryField.Equals(value) != true)) {
                    this.CanQueryField = value;
                    this.RaisePropertyChanged("CanQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval {
            get {
                return this.CanUnApprovalField;
            }
            set {
                if ((this.CanUnApprovalField.Equals(value) != true)) {
                    this.CanUnApprovalField = value;
                    this.RaisePropertyChanged("CanUnApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreateUser {
            get {
                return this.CreateUserField;
            }
            set {
                if ((object.ReferenceEquals(this.CreateUserField, value) != true)) {
                    this.CreateUserField = value;
                    this.RaisePropertyChanged("CreateUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept {
            get {
                return this.DeptField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptField, value) != true)) {
                    this.DeptField = value;
                    this.RaisePropertyChanged("Dept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID {
            get {
                return this.DeptIDField;
            }
            set {
                if ((this.DeptIDField.Equals(value) != true)) {
                    this.DeptIDField = value;
                    this.RaisePropertyChanged("DeptID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDateTime {
            get {
                return this.EndDateTimeField;
            }
            set {
                if ((this.EndDateTimeField.Equals(value) != true)) {
                    this.EndDateTimeField = value;
                    this.RaisePropertyChanged("EndDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName {
            get {
                return this.MenuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuNameField, value) != true)) {
                    this.MenuNameField = value;
                    this.RaisePropertyChanged("MenuName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID {
            get {
                return this.ModuleIDField;
            }
            set {
                if ((this.ModuleIDField.Equals(value) != true)) {
                    this.ModuleIDField = value;
                    this.RaisePropertyChanged("ModuleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName {
            get {
                return this.ModuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleNameField, value) != true)) {
                    this.ModuleNameField = value;
                    this.RaisePropertyChanged("ModuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProxyID {
            get {
                return this.ProxyIDField;
            }
            set {
                if ((this.ProxyIDField.Equals(value) != true)) {
                    this.ProxyIDField = value;
                    this.RaisePropertyChanged("ProxyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxyUser {
            get {
                return this.ProxyUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ProxyUserField, value) != true)) {
                    this.ProxyUserField = value;
                    this.RaisePropertyChanged("ProxyUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProxyedUser {
            get {
                return this.ProxyedUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ProxyedUserField, value) != true)) {
                    this.ProxyedUserField = value;
                    this.RaisePropertyChanged("ProxyedUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailID {
            get {
                return this.RoleDetailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailIDField, value) != true)) {
                    this.RoleDetailIDField = value;
                    this.RaisePropertyChanged("RoleDetailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleDetailName {
            get {
                return this.RoleDetailNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailNameField, value) != true)) {
                    this.RoleDetailNameField = value;
                    this.RaisePropertyChanged("RoleDetailName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDateTime {
            get {
                return this.StartDateTimeField;
            }
            set {
                if ((this.StartDateTimeField.Equals(value) != true)) {
                    this.StartDateTimeField = value;
                    this.RaisePropertyChanged("StartDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class UserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.UserInfo.Gender SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.UserInfo.StatusType StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Tel1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Tel2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.UserInfo.UserType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFullField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDay {
            get {
                return this.BirthDayField;
            }
            set {
                if ((this.BirthDayField.Equals(value) != true)) {
                    this.BirthDayField = value;
                    this.RaisePropertyChanged("BirthDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.UserInfo.Gender Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.UserInfo.StatusType Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tel1 {
            get {
                return this.Tel1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Tel1Field, value) != true)) {
                    this.Tel1Field = value;
                    this.RaisePropertyChanged("Tel1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tel2 {
            get {
                return this.Tel2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Tel2Field, value) != true)) {
                    this.Tel2Field = value;
                    this.RaisePropertyChanged("Tel2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.UserInfo.UserType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFull {
            get {
                return this.UserFullField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFullField, value) != true)) {
                    this.UserFullField = value;
                    this.RaisePropertyChanged("UserFull");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.Gender", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum Gender : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            男 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            女 = 1,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.StatusType", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum StatusType : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            正常 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            关闭 = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            删除 = 2,
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo.UserType", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum UserType : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            普通用户 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            管理员 = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModulePermissionInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class ModulePermissionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanModifyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanOther3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanUnApprovalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MenuNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModuleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RoleDetailIDListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanApproval {
            get {
                return this.CanApprovalField;
            }
            set {
                if ((this.CanApprovalField.Equals(value) != true)) {
                    this.CanApprovalField = value;
                    this.RaisePropertyChanged("CanApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanCreate {
            get {
                return this.CanCreateField;
            }
            set {
                if ((this.CanCreateField.Equals(value) != true)) {
                    this.CanCreateField = value;
                    this.RaisePropertyChanged("CanCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanDelete {
            get {
                return this.CanDeleteField;
            }
            set {
                if ((this.CanDeleteField.Equals(value) != true)) {
                    this.CanDeleteField = value;
                    this.RaisePropertyChanged("CanDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanModify {
            get {
                return this.CanModifyField;
            }
            set {
                if ((this.CanModifyField.Equals(value) != true)) {
                    this.CanModifyField = value;
                    this.RaisePropertyChanged("CanModify");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther1 {
            get {
                return this.CanOther1Field;
            }
            set {
                if ((this.CanOther1Field.Equals(value) != true)) {
                    this.CanOther1Field = value;
                    this.RaisePropertyChanged("CanOther1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther2 {
            get {
                return this.CanOther2Field;
            }
            set {
                if ((this.CanOther2Field.Equals(value) != true)) {
                    this.CanOther2Field = value;
                    this.RaisePropertyChanged("CanOther2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanOther3 {
            get {
                return this.CanOther3Field;
            }
            set {
                if ((this.CanOther3Field.Equals(value) != true)) {
                    this.CanOther3Field = value;
                    this.RaisePropertyChanged("CanOther3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanQuery {
            get {
                return this.CanQueryField;
            }
            set {
                if ((this.CanQueryField.Equals(value) != true)) {
                    this.CanQueryField = value;
                    this.RaisePropertyChanged("CanQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanUnApproval {
            get {
                return this.CanUnApprovalField;
            }
            set {
                if ((this.CanUnApprovalField.Equals(value) != true)) {
                    this.CanUnApprovalField = value;
                    this.RaisePropertyChanged("CanUnApproval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MenuName {
            get {
                return this.MenuNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuNameField, value) != true)) {
                    this.MenuNameField = value;
                    this.RaisePropertyChanged("MenuName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID {
            get {
                return this.ModuleIDField;
            }
            set {
                if ((this.ModuleIDField.Equals(value) != true)) {
                    this.ModuleIDField = value;
                    this.RaisePropertyChanged("ModuleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName {
            get {
                return this.ModuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleNameField, value) != true)) {
                    this.ModuleNameField = value;
                    this.RaisePropertyChanged("ModuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] RoleDetailIDList {
            get {
                return this.RoleDetailIDListField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailIDListField, value) != true)) {
                    this.RoleDetailIDListField = value;
                    this.RaisePropertyChanged("RoleDetailIDList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedLogInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class AuthorizedLogInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.AuthorizedLogInfo.ActivityTypeValue ActivityTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LogIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFClient.ServiceReference1.RoleDetailInfo RoleDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Activity {
            get {
                return this.ActivityField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityField, value) != true)) {
                    this.ActivityField = value;
                    this.RaisePropertyChanged("Activity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.AuthorizedLogInfo.ActivityTypeValue ActivityType {
            get {
                return this.ActivityTypeField;
            }
            set {
                if ((this.ActivityTypeField.Equals(value) != true)) {
                    this.ActivityTypeField = value;
                    this.RaisePropertyChanged("ActivityType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LogID {
            get {
                return this.LogIDField;
            }
            set {
                if ((this.LogIDField.Equals(value) != true)) {
                    this.LogIDField = value;
                    this.RaisePropertyChanged("LogID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatorName {
            get {
                return this.OperatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorNameField, value) != true)) {
                    this.OperatorNameField = value;
                    this.RaisePropertyChanged("OperatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFClient.ServiceReference1.RoleDetailInfo RoleDetail {
            get {
                return this.RoleDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleDetailField, value) != true)) {
                    this.RoleDetailField = value;
                    this.RaisePropertyChanged("RoleDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedLogInfo.ActivityTypeValue", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
        public enum ActivityTypeValue : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            普通授权 = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            代理授权 = 1,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuInfo", Namespace="http://schemas.datacontract.org/2004/07/MUAS.Service")]
    [System.SerializableAttribute()]
    public partial class MenuInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DLLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MenuIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModuleIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class {
            get {
                return this.ClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassField, value) != true)) {
                    this.ClassField = value;
                    this.RaisePropertyChanged("Class");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DLL {
            get {
                return this.DLLField;
            }
            set {
                if ((object.ReferenceEquals(this.DLLField, value) != true)) {
                    this.DLLField = value;
                    this.RaisePropertyChanged("DLL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MenuID {
            get {
                return this.MenuIDField;
            }
            set {
                if ((this.MenuIDField.Equals(value) != true)) {
                    this.MenuIDField = value;
                    this.RaisePropertyChanged("MenuID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModuleID {
            get {
                return this.ModuleIDField;
            }
            set {
                if ((this.ModuleIDField.Equals(value) != true)) {
                    this.ModuleIDField = value;
                    this.RaisePropertyChanged("ModuleID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IApplicationModule")]
    public interface IApplicationModule {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationModuleResponse")]
        WCFClient.ServiceReference1.ApplicationModuleInfo GetApplicationModule(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationModuleResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationModuleInfo> GetApplicationModuleAsync(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ModuleInApplication", ReplyAction="http://tempuri.org/IApplicationModule/ModuleInApplicationResponse")]
        bool ModuleInApplication(WCFClient.ServiceReference1.ApplicationInfo app, WCFClient.ServiceReference1.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ModuleInApplication", ReplyAction="http://tempuri.org/IApplicationModule/ModuleInApplicationResponse")]
        System.Threading.Tasks.Task<bool> ModuleInApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo app, WCFClient.ServiceReference1.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationByModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationByModuleResponse")]
        WCFClient.ServiceReference1.ApplicationInfo GetApplicationByModule(WCFClient.ServiceReference1.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/GetApplicationByModule", ReplyAction="http://tempuri.org/IApplicationModule/GetApplicationByModuleResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo> GetApplicationByModuleAsync(WCFClient.ServiceReference1.ModuleInfo module, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationAddMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationAddMoudlesResponse")]
        void ApplicationAddMoudles(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationAddMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationAddMoudlesResponse")]
        System.Threading.Tasks.Task ApplicationAddMoudlesAsync(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudlesResponse")]
        void ApplicationRemoveMoudles(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudles", ReplyAction="http://tempuri.org/IApplicationModule/ApplicationRemoveMoudlesResponse")]
        System.Threading.Tasks.Task ApplicationRemoveMoudlesAsync(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationModuleChannel : WCFClient.ServiceReference1.IApplicationModule, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationModuleClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IApplicationModule>, WCFClient.ServiceReference1.IApplicationModule {
        
        public ApplicationModuleClient() {
        }
        
        public ApplicationModuleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationModuleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationModuleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationModuleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.ApplicationModuleInfo GetApplicationModule(int appID, string guid) {
            return base.Channel.GetApplicationModule(appID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationModuleInfo> GetApplicationModuleAsync(int appID, string guid) {
            return base.Channel.GetApplicationModuleAsync(appID, guid);
        }
        
        public bool ModuleInApplication(WCFClient.ServiceReference1.ApplicationInfo app, WCFClient.ServiceReference1.ModuleInfo module, string guid) {
            return base.Channel.ModuleInApplication(app, module, guid);
        }
        
        public System.Threading.Tasks.Task<bool> ModuleInApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo app, WCFClient.ServiceReference1.ModuleInfo module, string guid) {
            return base.Channel.ModuleInApplicationAsync(app, module, guid);
        }
        
        public WCFClient.ServiceReference1.ApplicationInfo GetApplicationByModule(WCFClient.ServiceReference1.ModuleInfo module, string guid) {
            return base.Channel.GetApplicationByModule(module, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo> GetApplicationByModuleAsync(WCFClient.ServiceReference1.ModuleInfo module, string guid) {
            return base.Channel.GetApplicationByModuleAsync(module, guid);
        }
        
        public void ApplicationAddMoudles(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid) {
            base.Channel.ApplicationAddMoudles(modules, app, guid);
        }
        
        public System.Threading.Tasks.Task ApplicationAddMoudlesAsync(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid) {
            return base.Channel.ApplicationAddMoudlesAsync(modules, app, guid);
        }
        
        public void ApplicationRemoveMoudles(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid) {
            base.Channel.ApplicationRemoveMoudles(modules, app, guid);
        }
        
        public System.Threading.Tasks.Task ApplicationRemoveMoudlesAsync(WCFClient.ServiceReference1.ModuleInfo[] modules, WCFClient.ServiceReference1.ApplicationInfo app, string guid) {
            return base.Channel.ApplicationRemoveMoudlesAsync(modules, app, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IApplication")]
    public interface IApplication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationByID", ReplyAction="http://tempuri.org/IApplication/GetApplicationByIDResponse")]
        WCFClient.ServiceReference1.ApplicationInfo GetApplicationByID(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationByID", ReplyAction="http://tempuri.org/IApplication/GetApplicationByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo> GetApplicationByIDAsync(int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationList", ReplyAction="http://tempuri.org/IApplication/GetApplicationListResponse")]
        WCFClient.ServiceReference1.ApplicationInfo[] GetApplicationList(string[] version, string[] name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/GetApplicationList", ReplyAction="http://tempuri.org/IApplication/GetApplicationListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo[]> GetApplicationListAsync(string[] version, string[] name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/AddApplication", ReplyAction="http://tempuri.org/IApplication/AddApplicationResponse")]
        void AddApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/AddApplication", ReplyAction="http://tempuri.org/IApplication/AddApplicationResponse")]
        System.Threading.Tasks.Task AddApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/ModifyApplication", ReplyAction="http://tempuri.org/IApplication/ModifyApplicationResponse")]
        void ModifyApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/ModifyApplication", ReplyAction="http://tempuri.org/IApplication/ModifyApplicationResponse")]
        System.Threading.Tasks.Task ModifyApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/DeleteApplication", ReplyAction="http://tempuri.org/IApplication/DeleteApplicationResponse")]
        void DeleteApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplication/DeleteApplication", ReplyAction="http://tempuri.org/IApplication/DeleteApplicationResponse")]
        System.Threading.Tasks.Task DeleteApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationChannel : WCFClient.ServiceReference1.IApplication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IApplication>, WCFClient.ServiceReference1.IApplication {
        
        public ApplicationClient() {
        }
        
        public ApplicationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ApplicationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.ApplicationInfo GetApplicationByID(int appID, string guid) {
            return base.Channel.GetApplicationByID(appID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo> GetApplicationByIDAsync(int appID, string guid) {
            return base.Channel.GetApplicationByIDAsync(appID, guid);
        }
        
        public WCFClient.ServiceReference1.ApplicationInfo[] GetApplicationList(string[] version, string[] name, string guid) {
            return base.Channel.GetApplicationList(version, name, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ApplicationInfo[]> GetApplicationListAsync(string[] version, string[] name, string guid) {
            return base.Channel.GetApplicationListAsync(version, name, guid);
        }
        
        public void AddApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            base.Channel.AddApplication(value, guid);
        }
        
        public System.Threading.Tasks.Task AddApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            return base.Channel.AddApplicationAsync(value, guid);
        }
        
        public void ModifyApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            base.Channel.ModifyApplication(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            return base.Channel.ModifyApplicationAsync(value, guid);
        }
        
        public void DeleteApplication(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            base.Channel.DeleteApplication(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteApplicationAsync(WCFClient.ServiceReference1.ApplicationInfo value, string guid) {
            return base.Channel.DeleteApplicationAsync(value, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IModule")]
    public interface IModule {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleByID", ReplyAction="http://tempuri.org/IModule/GetModuleByIDResponse")]
        WCFClient.ServiceReference1.ModuleInfo GetModuleByID(int moduleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleByID", ReplyAction="http://tempuri.org/IModule/GetModuleByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModuleInfo> GetModuleByIDAsync(int moduleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleList", ReplyAction="http://tempuri.org/IModule/GetModuleListResponse")]
        WCFClient.ServiceReference1.ModuleInfo[] GetModuleList(string menuName, System.Nullable<int> parentID, string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/GetModuleList", ReplyAction="http://tempuri.org/IModule/GetModuleListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModuleInfo[]> GetModuleListAsync(string menuName, System.Nullable<int> parentID, string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/ModifyModule", ReplyAction="http://tempuri.org/IModule/ModifyModuleResponse")]
        void ModifyModule(WCFClient.ServiceReference1.ModuleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IModule/ModifyModule", ReplyAction="http://tempuri.org/IModule/ModifyModuleResponse")]
        System.Threading.Tasks.Task ModifyModuleAsync(WCFClient.ServiceReference1.ModuleInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IModuleChannel : WCFClient.ServiceReference1.IModule, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModuleClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IModule>, WCFClient.ServiceReference1.IModule {
        
        public ModuleClient() {
        }
        
        public ModuleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ModuleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModuleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ModuleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.ModuleInfo GetModuleByID(int moduleID, string guid) {
            return base.Channel.GetModuleByID(moduleID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModuleInfo> GetModuleByIDAsync(int moduleID, string guid) {
            return base.Channel.GetModuleByIDAsync(moduleID, guid);
        }
        
        public WCFClient.ServiceReference1.ModuleInfo[] GetModuleList(string menuName, System.Nullable<int> parentID, string name, string guid) {
            return base.Channel.GetModuleList(menuName, parentID, name, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModuleInfo[]> GetModuleListAsync(string menuName, System.Nullable<int> parentID, string name, string guid) {
            return base.Channel.GetModuleListAsync(menuName, parentID, name, guid);
        }
        
        public void ModifyModule(WCFClient.ServiceReference1.ModuleInfo value, string guid) {
            base.Channel.ModifyModule(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyModuleAsync(WCFClient.ServiceReference1.ModuleInfo value, string guid) {
            return base.Channel.ModifyModuleAsync(value, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRole")]
    public interface IRole {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleByID", ReplyAction="http://tempuri.org/IRole/GetRoleByIDResponse")]
        WCFClient.ServiceReference1.RoleInfo GetRoleByID(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleByID", ReplyAction="http://tempuri.org/IRole/GetRoleByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleInfo> GetRoleByIDAsync(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleList", ReplyAction="http://tempuri.org/IRole/GetRoleListResponse")]
        WCFClient.ServiceReference1.RoleInfo[] GetRoleList(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleList", ReplyAction="http://tempuri.org/IRole/GetRoleListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleInfo[]> GetRoleListAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/CloseRole", ReplyAction="http://tempuri.org/IRole/CloseRoleResponse")]
        void CloseRole(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/CloseRole", ReplyAction="http://tempuri.org/IRole/CloseRoleResponse")]
        System.Threading.Tasks.Task CloseRoleAsync(int roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/AddRole", ReplyAction="http://tempuri.org/IRole/AddRoleResponse")]
        void AddRole(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/AddRole", ReplyAction="http://tempuri.org/IRole/AddRoleResponse")]
        System.Threading.Tasks.Task AddRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/ModifyRole", ReplyAction="http://tempuri.org/IRole/ModifyRoleResponse")]
        void ModifyRole(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/ModifyRole", ReplyAction="http://tempuri.org/IRole/ModifyRoleResponse")]
        System.Threading.Tasks.Task ModifyRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/DeleteRole", ReplyAction="http://tempuri.org/IRole/DeleteRoleResponse")]
        void DeleteRole(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/DeleteRole", ReplyAction="http://tempuri.org/IRole/DeleteRoleResponse")]
        System.Threading.Tasks.Task DeleteRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleIDByLoginUser", ReplyAction="http://tempuri.org/IRole/GetRoleIDByLoginUserResponse")]
        int[] GetRoleIDByLoginUser(string optUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRole/GetRoleIDByLoginUser", ReplyAction="http://tempuri.org/IRole/GetRoleIDByLoginUserResponse")]
        System.Threading.Tasks.Task<int[]> GetRoleIDByLoginUserAsync(string optUser, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoleChannel : WCFClient.ServiceReference1.IRole, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoleClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IRole>, WCFClient.ServiceReference1.IRole {
        
        public RoleClient() {
        }
        
        public RoleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.RoleInfo GetRoleByID(int roleID, string guid) {
            return base.Channel.GetRoleByID(roleID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleInfo> GetRoleByIDAsync(int roleID, string guid) {
            return base.Channel.GetRoleByIDAsync(roleID, guid);
        }
        
        public WCFClient.ServiceReference1.RoleInfo[] GetRoleList(string name, string guid) {
            return base.Channel.GetRoleList(name, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleInfo[]> GetRoleListAsync(string name, string guid) {
            return base.Channel.GetRoleListAsync(name, guid);
        }
        
        public void CloseRole(int roleID, string guid) {
            base.Channel.CloseRole(roleID, guid);
        }
        
        public System.Threading.Tasks.Task CloseRoleAsync(int roleID, string guid) {
            return base.Channel.CloseRoleAsync(roleID, guid);
        }
        
        public void AddRole(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            base.Channel.AddRole(value, guid);
        }
        
        public System.Threading.Tasks.Task AddRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            return base.Channel.AddRoleAsync(value, guid);
        }
        
        public void ModifyRole(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            base.Channel.ModifyRole(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            return base.Channel.ModifyRoleAsync(value, guid);
        }
        
        public void DeleteRole(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            base.Channel.DeleteRole(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteRoleAsync(WCFClient.ServiceReference1.RoleInfo value, string guid) {
            return base.Channel.DeleteRoleAsync(value, guid);
        }
        
        public int[] GetRoleIDByLoginUser(string optUser, string guid) {
            return base.Channel.GetRoleIDByLoginUser(optUser, guid);
        }
        
        public System.Threading.Tasks.Task<int[]> GetRoleIDByLoginUserAsync(string optUser, string guid) {
            return base.Channel.GetRoleIDByLoginUserAsync(optUser, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRolePermission")]
    public interface IRolePermission {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GetRolePermission", ReplyAction="http://tempuri.org/IRolePermission/GetRolePermissionResponse")]
        WCFClient.ServiceReference1.RolePermissionInfo GetRolePermission(string roleDetailID, int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GetRolePermission", ReplyAction="http://tempuri.org/IRolePermission/GetRolePermissionResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.RolePermissionInfo> GetRolePermissionAsync(string roleDetailID, int appID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GrantRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/GrantRolePermissionsResponse")]
        void GrantRolePermissions(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/GrantRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/GrantRolePermissionsResponse")]
        System.Threading.Tasks.Task GrantRolePermissionsAsync(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/RetracRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/RetracRolePermissionsResponse")]
        void RetracRolePermissions(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRolePermission/RetracRolePermissions", ReplyAction="http://tempuri.org/IRolePermission/RetracRolePermissionsResponse")]
        System.Threading.Tasks.Task RetracRolePermissionsAsync(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRolePermissionChannel : WCFClient.ServiceReference1.IRolePermission, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RolePermissionClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IRolePermission>, WCFClient.ServiceReference1.IRolePermission {
        
        public RolePermissionClient() {
        }
        
        public RolePermissionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RolePermissionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RolePermissionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RolePermissionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.RolePermissionInfo GetRolePermission(string roleDetailID, int appID, string guid) {
            return base.Channel.GetRolePermission(roleDetailID, appID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.RolePermissionInfo> GetRolePermissionAsync(string roleDetailID, int appID, string guid) {
            return base.Channel.GetRolePermissionAsync(roleDetailID, appID, guid);
        }
        
        public void GrantRolePermissions(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid) {
            base.Channel.GrantRolePermissions(permissions, roleDetail, guid);
        }
        
        public System.Threading.Tasks.Task GrantRolePermissionsAsync(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid) {
            return base.Channel.GrantRolePermissionsAsync(permissions, roleDetail, guid);
        }
        
        public void RetracRolePermissions(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid) {
            base.Channel.RetracRolePermissions(permissions, roleDetail, guid);
        }
        
        public System.Threading.Tasks.Task RetracRolePermissionsAsync(WCFClient.ServiceReference1.PermissionInfo[] permissions, WCFClient.ServiceReference1.RoleDetailInfo roleDetail, string guid) {
            return base.Channel.RetracRolePermissionsAsync(permissions, roleDetail, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPermission")]
    public interface IPermission {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermission", ReplyAction="http://tempuri.org/IPermission/GetPermissionResponse")]
        WCFClient.ServiceReference1.PermissionInfo GetPermission(int permissionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermission", ReplyAction="http://tempuri.org/IPermission/GetPermissionResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.PermissionInfo> GetPermissionAsync(int permissionID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermissionList", ReplyAction="http://tempuri.org/IPermission/GetPermissionListResponse")]
        WCFClient.ServiceReference1.PermissionInfo[] GetPermissionList(WCFClient.ServiceReference1.ModuleInfo module, WCFClient.ServiceReference1.RoleDetailInfo role, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetPermissionList", ReplyAction="http://tempuri.org/IPermission/GetPermissionListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.PermissionInfo[]> GetPermissionListAsync(WCFClient.ServiceReference1.ModuleInfo module, WCFClient.ServiceReference1.RoleDetailInfo role, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/AddPermission", ReplyAction="http://tempuri.org/IPermission/AddPermissionResponse")]
        void AddPermission(string rdid, WCFClient.ServiceReference1.PermissionInfo[] permissions, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/AddPermission", ReplyAction="http://tempuri.org/IPermission/AddPermissionResponse")]
        System.Threading.Tasks.Task AddPermissionAsync(string rdid, WCFClient.ServiceReference1.PermissionInfo[] permissions, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/ModifyPermission", ReplyAction="http://tempuri.org/IPermission/ModifyPermissionResponse")]
        void ModifyPermission(string rdid, WCFClient.ServiceReference1.PermissionInfo[] value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/ModifyPermission", ReplyAction="http://tempuri.org/IPermission/ModifyPermissionResponse")]
        System.Threading.Tasks.Task ModifyPermissionAsync(string rdid, WCFClient.ServiceReference1.PermissionInfo[] value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetUserPermission", ReplyAction="http://tempuri.org/IPermission/GetUserPermissionResponse")]
        WCFClient.ServiceReference1.UserPermissionInfo GetUserPermission(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermission/GetUserPermission", ReplyAction="http://tempuri.org/IPermission/GetUserPermissionResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserPermissionInfo> GetUserPermissionAsync(string userName, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPermissionChannel : WCFClient.ServiceReference1.IPermission, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PermissionClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IPermission>, WCFClient.ServiceReference1.IPermission {
        
        public PermissionClient() {
        }
        
        public PermissionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PermissionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.PermissionInfo GetPermission(int permissionID, string guid) {
            return base.Channel.GetPermission(permissionID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.PermissionInfo> GetPermissionAsync(int permissionID, string guid) {
            return base.Channel.GetPermissionAsync(permissionID, guid);
        }
        
        public WCFClient.ServiceReference1.PermissionInfo[] GetPermissionList(WCFClient.ServiceReference1.ModuleInfo module, WCFClient.ServiceReference1.RoleDetailInfo role, string guid) {
            return base.Channel.GetPermissionList(module, role, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.PermissionInfo[]> GetPermissionListAsync(WCFClient.ServiceReference1.ModuleInfo module, WCFClient.ServiceReference1.RoleDetailInfo role, string guid) {
            return base.Channel.GetPermissionListAsync(module, role, guid);
        }
        
        public void AddPermission(string rdid, WCFClient.ServiceReference1.PermissionInfo[] permissions, string guid) {
            base.Channel.AddPermission(rdid, permissions, guid);
        }
        
        public System.Threading.Tasks.Task AddPermissionAsync(string rdid, WCFClient.ServiceReference1.PermissionInfo[] permissions, string guid) {
            return base.Channel.AddPermissionAsync(rdid, permissions, guid);
        }
        
        public void ModifyPermission(string rdid, WCFClient.ServiceReference1.PermissionInfo[] value, string guid) {
            base.Channel.ModifyPermission(rdid, value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyPermissionAsync(string rdid, WCFClient.ServiceReference1.PermissionInfo[] value, string guid) {
            return base.Channel.ModifyPermissionAsync(rdid, value, guid);
        }
        
        public WCFClient.ServiceReference1.UserPermissionInfo GetUserPermission(string userName, string guid) {
            return base.Channel.GetUserPermission(userName, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserPermissionInfo> GetUserPermissionAsync(string userName, string guid) {
            return base.Channel.GetUserPermissionAsync(userName, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICompany")]
    public interface ICompany {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyByID", ReplyAction="http://tempuri.org/ICompany/GetCompanyByIDResponse")]
        WCFClient.ServiceReference1.CompanyInfo GetCompanyByID(int companyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyByID", ReplyAction="http://tempuri.org/ICompany/GetCompanyByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo> GetCompanyByIDAsync(int companyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyList", ReplyAction="http://tempuri.org/ICompany/GetCompanyListResponse")]
        WCFClient.ServiceReference1.CompanyInfo[] GetCompanyList(string name, System.Nullable<WCFClient.ServiceReference1.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyList", ReplyAction="http://tempuri.org/ICompany/GetCompanyListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo[]> GetCompanyListAsync(string name, System.Nullable<WCFClient.ServiceReference1.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/AddCompany", ReplyAction="http://tempuri.org/ICompany/AddCompanyResponse")]
        void AddCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/AddCompany", ReplyAction="http://tempuri.org/ICompany/AddCompanyResponse")]
        System.Threading.Tasks.Task AddCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/ModifyCompany", ReplyAction="http://tempuri.org/ICompany/ModifyCompanyResponse")]
        void ModifyCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/ModifyCompany", ReplyAction="http://tempuri.org/ICompany/ModifyCompanyResponse")]
        System.Threading.Tasks.Task ModifyCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/DeleteCompany", ReplyAction="http://tempuri.org/ICompany/DeleteCompanyResponse")]
        void DeleteCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/DeleteCompany", ReplyAction="http://tempuri.org/ICompany/DeleteCompanyResponse")]
        System.Threading.Tasks.Task DeleteCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyListFlag", ReplyAction="http://tempuri.org/ICompany/GetCompanyListFlagResponse")]
        WCFClient.ServiceReference1.CompanyInfo[] GetCompanyListFlag(bool flag, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompany/GetCompanyListFlag", ReplyAction="http://tempuri.org/ICompany/GetCompanyListFlagResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo[]> GetCompanyListFlagAsync(bool flag, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICompanyChannel : WCFClient.ServiceReference1.ICompany, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CompanyClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.ICompany>, WCFClient.ServiceReference1.ICompany {
        
        public CompanyClient() {
        }
        
        public CompanyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CompanyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CompanyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.CompanyInfo GetCompanyByID(int companyID, string guid) {
            return base.Channel.GetCompanyByID(companyID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo> GetCompanyByIDAsync(int companyID, string guid) {
            return base.Channel.GetCompanyByIDAsync(companyID, guid);
        }
        
        public WCFClient.ServiceReference1.CompanyInfo[] GetCompanyList(string name, System.Nullable<WCFClient.ServiceReference1.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid) {
            return base.Channel.GetCompanyList(name, type, isCompany, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo[]> GetCompanyListAsync(string name, System.Nullable<WCFClient.ServiceReference1.CompanyInfo.TypeValue> type, System.Nullable<bool> isCompany, string guid) {
            return base.Channel.GetCompanyListAsync(name, type, isCompany, guid);
        }
        
        public void AddCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            base.Channel.AddCompany(value, guid);
        }
        
        public System.Threading.Tasks.Task AddCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            return base.Channel.AddCompanyAsync(value, guid);
        }
        
        public void ModifyCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            base.Channel.ModifyCompany(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            return base.Channel.ModifyCompanyAsync(value, guid);
        }
        
        public void DeleteCompany(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            base.Channel.DeleteCompany(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteCompanyAsync(WCFClient.ServiceReference1.CompanyInfo value, string guid) {
            return base.Channel.DeleteCompanyAsync(value, guid);
        }
        
        public WCFClient.ServiceReference1.CompanyInfo[] GetCompanyListFlag(bool flag, string guid) {
            return base.Channel.GetCompanyListFlag(flag, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.CompanyInfo[]> GetCompanyListFlagAsync(bool flag, string guid) {
            return base.Channel.GetCompanyListFlagAsync(flag, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDepartment")]
    public interface IDepartment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentByID", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentByIDResponse")]
        WCFClient.ServiceReference1.DepartmentInfo GetDepartmentByID(int detpID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentByID", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.DepartmentInfo> GetDepartmentByIDAsync(int detpID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentListByName", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentListByNameResponse")]
        WCFClient.ServiceReference1.DepartmentInfo[] GetDepartmentListByName(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/GetDepartmentListByName", ReplyAction="http://tempuri.org/IDepartment/GetDepartmentListByNameResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.DepartmentInfo[]> GetDepartmentListByNameAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/AddDepartment", ReplyAction="http://tempuri.org/IDepartment/AddDepartmentResponse")]
        void AddDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/AddDepartment", ReplyAction="http://tempuri.org/IDepartment/AddDepartmentResponse")]
        System.Threading.Tasks.Task AddDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/ModifyDepartment", ReplyAction="http://tempuri.org/IDepartment/ModifyDepartmentResponse")]
        void ModifyDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/ModifyDepartment", ReplyAction="http://tempuri.org/IDepartment/ModifyDepartmentResponse")]
        System.Threading.Tasks.Task ModifyDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/DeleteDepartment", ReplyAction="http://tempuri.org/IDepartment/DeleteDepartmentResponse")]
        void DeleteDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDepartment/DeleteDepartment", ReplyAction="http://tempuri.org/IDepartment/DeleteDepartmentResponse")]
        System.Threading.Tasks.Task DeleteDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDepartmentChannel : WCFClient.ServiceReference1.IDepartment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DepartmentClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IDepartment>, WCFClient.ServiceReference1.IDepartment {
        
        public DepartmentClient() {
        }
        
        public DepartmentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DepartmentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DepartmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DepartmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.DepartmentInfo GetDepartmentByID(int detpID, string guid) {
            return base.Channel.GetDepartmentByID(detpID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.DepartmentInfo> GetDepartmentByIDAsync(int detpID, string guid) {
            return base.Channel.GetDepartmentByIDAsync(detpID, guid);
        }
        
        public WCFClient.ServiceReference1.DepartmentInfo[] GetDepartmentListByName(string name, string guid) {
            return base.Channel.GetDepartmentListByName(name, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.DepartmentInfo[]> GetDepartmentListByNameAsync(string name, string guid) {
            return base.Channel.GetDepartmentListByNameAsync(name, guid);
        }
        
        public void AddDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            base.Channel.AddDepartment(value, guid);
        }
        
        public System.Threading.Tasks.Task AddDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            return base.Channel.AddDepartmentAsync(value, guid);
        }
        
        public void ModifyDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            base.Channel.ModifyDepartment(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            return base.Channel.ModifyDepartmentAsync(value, guid);
        }
        
        public void DeleteDepartment(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            base.Channel.DeleteDepartment(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteDepartmentAsync(WCFClient.ServiceReference1.DepartmentInfo value, string guid) {
            return base.Channel.DeleteDepartmentAsync(value, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IGroup")]
    public interface IGroup {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupByID", ReplyAction="http://tempuri.org/IGroup/GetGroupByIDResponse")]
        WCFClient.ServiceReference1.GroupInfo GetGroupByID(int groupID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupByID", ReplyAction="http://tempuri.org/IGroup/GetGroupByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo> GetGroupByIDAsync(int groupID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupList", ReplyAction="http://tempuri.org/IGroup/GetGroupListResponse")]
        WCFClient.ServiceReference1.GroupInfo[] GetGroupList(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetGroupList", ReplyAction="http://tempuri.org/IGroup/GetGroupListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo[]> GetGroupListAsync(string name, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetMyGroupList", ReplyAction="http://tempuri.org/IGroup/GetMyGroupListResponse")]
        WCFClient.ServiceReference1.GroupInfo[] GetMyGroupList(string name, string guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/GetMyGroupList", ReplyAction="http://tempuri.org/IGroup/GetMyGroupListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo[]> GetMyGroupListAsync(string name, string guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/AddGroup", ReplyAction="http://tempuri.org/IGroup/AddGroupResponse")]
        void AddGroup(WCFClient.ServiceReference1.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/AddGroup", ReplyAction="http://tempuri.org/IGroup/AddGroupResponse")]
        System.Threading.Tasks.Task AddGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/ModifyGroup", ReplyAction="http://tempuri.org/IGroup/ModifyGroupResponse")]
        void ModifyGroup(WCFClient.ServiceReference1.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/ModifyGroup", ReplyAction="http://tempuri.org/IGroup/ModifyGroupResponse")]
        System.Threading.Tasks.Task ModifyGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/DeleteGroup", ReplyAction="http://tempuri.org/IGroup/DeleteGroupResponse")]
        void DeleteGroup(WCFClient.ServiceReference1.GroupInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGroup/DeleteGroup", ReplyAction="http://tempuri.org/IGroup/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGroupChannel : WCFClient.ServiceReference1.IGroup, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IGroup>, WCFClient.ServiceReference1.IGroup {
        
        public GroupClient() {
        }
        
        public GroupClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GroupClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GroupClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GroupClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.GroupInfo GetGroupByID(int groupID, string guid) {
            return base.Channel.GetGroupByID(groupID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo> GetGroupByIDAsync(int groupID, string guid) {
            return base.Channel.GetGroupByIDAsync(groupID, guid);
        }
        
        public WCFClient.ServiceReference1.GroupInfo[] GetGroupList(string name, string guid) {
            return base.Channel.GetGroupList(name, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo[]> GetGroupListAsync(string name, string guid) {
            return base.Channel.GetGroupListAsync(name, guid);
        }
        
        public WCFClient.ServiceReference1.GroupInfo[] GetMyGroupList(string name, string guid, bool flag) {
            return base.Channel.GetMyGroupList(name, guid, flag);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.GroupInfo[]> GetMyGroupListAsync(string name, string guid, bool flag) {
            return base.Channel.GetMyGroupListAsync(name, guid, flag);
        }
        
        public void AddGroup(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            base.Channel.AddGroup(value, guid);
        }
        
        public System.Threading.Tasks.Task AddGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            return base.Channel.AddGroupAsync(value, guid);
        }
        
        public void ModifyGroup(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            base.Channel.ModifyGroup(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            return base.Channel.ModifyGroupAsync(value, guid);
        }
        
        public void DeleteGroup(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            base.Channel.DeleteGroup(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(WCFClient.ServiceReference1.GroupInfo value, string guid) {
            return base.Channel.DeleteGroupAsync(value, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRoleDetail")]
    public interface IRoleDetail {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByUser", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByUserResponse")]
        System.Data.DataSet GetRoleDetailByUser(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByUser", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByUserResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetRoleDetailByUserAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByID", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByIDResponse")]
        WCFClient.ServiceReference1.RoleDetailInfo GetRoleDetailByID(string id, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailByID", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleDetailInfo> GetRoleDetailByIDAsync(string id, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailList", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailListResponse")]
        WCFClient.ServiceReference1.RoleDetailInfo[] GetRoleDetailList(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/GetRoleDetailList", ReplyAction="http://tempuri.org/IRoleDetail/GetRoleDetailListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleDetailInfo[]> GetRoleDetailListAsync(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/AddRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/AddRoleDetailResponse")]
        void AddRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/AddRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/AddRoleDetailResponse")]
        System.Threading.Tasks.Task AddRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/ModifyRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/ModifyRoleDetailResponse")]
        void ModifyRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/ModifyRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/ModifyRoleDetailResponse")]
        System.Threading.Tasks.Task ModifyRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/DeleteRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/DeleteRoleDetailResponse")]
        void DeleteRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleDetail/DeleteRoleDetail", ReplyAction="http://tempuri.org/IRoleDetail/DeleteRoleDetailResponse")]
        System.Threading.Tasks.Task DeleteRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoleDetailChannel : WCFClient.ServiceReference1.IRoleDetail, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoleDetailClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IRoleDetail>, WCFClient.ServiceReference1.IRoleDetail {
        
        public RoleDetailClient() {
        }
        
        public RoleDetailClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoleDetailClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleDetailClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleDetailClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetRoleDetailByUser(string userName, string guid) {
            return base.Channel.GetRoleDetailByUser(userName, guid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetRoleDetailByUserAsync(string userName, string guid) {
            return base.Channel.GetRoleDetailByUserAsync(userName, guid);
        }
        
        public WCFClient.ServiceReference1.RoleDetailInfo GetRoleDetailByID(string id, string guid) {
            return base.Channel.GetRoleDetailByID(id, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleDetailInfo> GetRoleDetailByIDAsync(string id, string guid) {
            return base.Channel.GetRoleDetailByIDAsync(id, guid);
        }
        
        public WCFClient.ServiceReference1.RoleDetailInfo[] GetRoleDetailList(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid) {
            return base.Channel.GetRoleDetailList(COMPANYID, DEPTID, GROUPID, ROLEID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.RoleDetailInfo[]> GetRoleDetailListAsync(int[] COMPANYID, int[] DEPTID, int[] GROUPID, int[] ROLEID, string guid) {
            return base.Channel.GetRoleDetailListAsync(COMPANYID, DEPTID, GROUPID, ROLEID, guid);
        }
        
        public void AddRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            base.Channel.AddRoleDetail(value, guid);
        }
        
        public System.Threading.Tasks.Task AddRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            return base.Channel.AddRoleDetailAsync(value, guid);
        }
        
        public void ModifyRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            base.Channel.ModifyRoleDetail(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            return base.Channel.ModifyRoleDetailAsync(value, guid);
        }
        
        public void DeleteRoleDetail(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            base.Channel.DeleteRoleDetail(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteRoleDetailAsync(WCFClient.ServiceReference1.RoleDetailInfo value, string guid) {
            return base.Channel.DeleteRoleDetailAsync(value, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUserRole")]
    public interface IUserRole {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRole", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleResponse")]
        WCFClient.ServiceReference1.UserRoleInfo[] GetUserRole(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRole", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserRoleInfo[]> GetUserRoleAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GrantUserRoles", ReplyAction="http://tempuri.org/IUserRole/GrantUserRolesResponse")]
        void GrantUserRoles(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GrantUserRoles", ReplyAction="http://tempuri.org/IUserRole/GrantUserRolesResponse")]
        System.Threading.Tasks.Task GrantUserRolesAsync(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/RetracUserRoles", ReplyAction="http://tempuri.org/IUserRole/RetracUserRolesResponse")]
        void RetracUserRoles(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/RetracUserRoles", ReplyAction="http://tempuri.org/IUserRole/RetracUserRolesResponse")]
        System.Threading.Tasks.Task RetracUserRolesAsync(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRoleByApp", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleByAppResponse")]
        WCFClient.ServiceReference1.UserRoleInfo[] GetUserRoleByApp(string userName, int applicationID, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRole/GetUserRoleByApp", ReplyAction="http://tempuri.org/IUserRole/GetUserRoleByAppResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserRoleInfo[]> GetUserRoleByAppAsync(string userName, int applicationID, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserRoleChannel : WCFClient.ServiceReference1.IUserRole, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserRoleClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IUserRole>, WCFClient.ServiceReference1.IUserRole {
        
        public UserRoleClient() {
        }
        
        public UserRoleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserRoleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRoleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.UserRoleInfo[] GetUserRole(string userName, string guid) {
            return base.Channel.GetUserRole(userName, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserRoleInfo[]> GetUserRoleAsync(string userName, string guid) {
            return base.Channel.GetUserRoleAsync(userName, guid);
        }
        
        public void GrantUserRoles(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid) {
            base.Channel.GrantUserRoles(roles, userName, operatorName, guid);
        }
        
        public System.Threading.Tasks.Task GrantUserRolesAsync(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid) {
            return base.Channel.GrantUserRolesAsync(roles, userName, operatorName, guid);
        }
        
        public void RetracUserRoles(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid) {
            base.Channel.RetracUserRoles(roles, userName, operatorName, guid);
        }
        
        public System.Threading.Tasks.Task RetracUserRolesAsync(WCFClient.ServiceReference1.RoleDetailInfo[] roles, string userName, string operatorName, string guid) {
            return base.Channel.RetracUserRolesAsync(roles, userName, operatorName, guid);
        }
        
        public WCFClient.ServiceReference1.UserRoleInfo[] GetUserRoleByApp(string userName, int applicationID, string token) {
            return base.Channel.GetUserRoleByApp(userName, applicationID, token);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserRoleInfo[]> GetUserRoleByAppAsync(string userName, int applicationID, string token) {
            return base.Channel.GetUserRoleByAppAsync(userName, applicationID, token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IToken")]
    public interface IToken {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/TestLink", ReplyAction="http://tempuri.org/IToken/TestLinkResponse")]
        void TestLink();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/TestLink", ReplyAction="http://tempuri.org/IToken/TestLinkResponse")]
        System.Threading.Tasks.Task TestLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetDateTime", ReplyAction="http://tempuri.org/IToken/GetDateTimeResponse")]
        System.DateTime GetDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetDateTime", ReplyAction="http://tempuri.org/IToken/GetDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/InsertToToken", ReplyAction="http://tempuri.org/IToken/InsertToTokenResponse")]
        string InsertToToken(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/InsertToToken", ReplyAction="http://tempuri.org/IToken/InsertToTokenResponse")]
        System.Threading.Tasks.Task<string> InsertToTokenAsync(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/LoginOutGuid", ReplyAction="http://tempuri.org/IToken/LoginOutGuidResponse")]
        void LoginOutGuid(System.DateTime endDateTime, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/LoginOutGuid", ReplyAction="http://tempuri.org/IToken/LoginOutGuidResponse")]
        System.Threading.Tasks.Task LoginOutGuidAsync(System.DateTime endDateTime, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getPopedomByUser", ReplyAction="http://tempuri.org/IToken/getPopedomByUserResponse")]
        int[] getPopedomByUser(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getPopedomByUser", ReplyAction="http://tempuri.org/IToken/getPopedomByUserResponse")]
        System.Threading.Tasks.Task<int[]> getPopedomByUserAsync(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUser", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserResponse")]
        int[] getCompanyIDByUser(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUser", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserResponse")]
        System.Threading.Tasks.Task<int[]> getCompanyIDByUserAsync(string Guid, bool flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUserID", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserIDResponse")]
        int[] getCompanyIDByUserID(string userName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/getCompanyIDByUserID", ReplyAction="http://tempuri.org/IToken/getCompanyIDByUserIDResponse")]
        System.Threading.Tasks.Task<int[]> getCompanyIDByUserIDAsync(string userName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/ValidateGuid", ReplyAction="http://tempuri.org/IToken/ValidateGuidResponse")]
        void ValidateGuid(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/ValidateGuid", ReplyAction="http://tempuri.org/IToken/ValidateGuidResponse")]
        System.Threading.Tasks.Task ValidateGuidAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetUserByGUID", ReplyAction="http://tempuri.org/IToken/GetUserByGUIDResponse")]
        string GetUserByGUID(string Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetUserByGUID", ReplyAction="http://tempuri.org/IToken/GetUserByGUIDResponse")]
        System.Threading.Tasks.Task<string> GetUserByGUIDAsync(string Guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetGroupIDByUserName", ReplyAction="http://tempuri.org/IToken/GetGroupIDByUserNameResponse")]
        int[] GetGroupIDByUserName(string userName, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IToken/GetGroupIDByUserName", ReplyAction="http://tempuri.org/IToken/GetGroupIDByUserNameResponse")]
        System.Threading.Tasks.Task<int[]> GetGroupIDByUserNameAsync(string userName, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITokenChannel : WCFClient.ServiceReference1.IToken, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TokenClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IToken>, WCFClient.ServiceReference1.IToken {
        
        public TokenClient() {
        }
        
        public TokenClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TokenClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TokenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestLink() {
            base.Channel.TestLink();
        }
        
        public System.Threading.Tasks.Task TestLinkAsync() {
            return base.Channel.TestLinkAsync();
        }
        
        public System.DateTime GetDateTime() {
            return base.Channel.GetDateTime();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateTimeAsync() {
            return base.Channel.GetDateTimeAsync();
        }
        
        public string InsertToToken(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress) {
            return base.Channel.InsertToToken(userName, startDateTime, endDateTime, ipAddress, machine, macAddress);
        }
        
        public System.Threading.Tasks.Task<string> InsertToTokenAsync(string userName, System.DateTime startDateTime, System.DateTime endDateTime, string ipAddress, string machine, string macAddress) {
            return base.Channel.InsertToTokenAsync(userName, startDateTime, endDateTime, ipAddress, machine, macAddress);
        }
        
        public void LoginOutGuid(System.DateTime endDateTime, string guid) {
            base.Channel.LoginOutGuid(endDateTime, guid);
        }
        
        public System.Threading.Tasks.Task LoginOutGuidAsync(System.DateTime endDateTime, string guid) {
            return base.Channel.LoginOutGuidAsync(endDateTime, guid);
        }
        
        public int[] getPopedomByUser(string Guid, bool flag) {
            return base.Channel.getPopedomByUser(Guid, flag);
        }
        
        public System.Threading.Tasks.Task<int[]> getPopedomByUserAsync(string Guid, bool flag) {
            return base.Channel.getPopedomByUserAsync(Guid, flag);
        }
        
        public int[] getCompanyIDByUser(string Guid, bool flag) {
            return base.Channel.getCompanyIDByUser(Guid, flag);
        }
        
        public System.Threading.Tasks.Task<int[]> getCompanyIDByUserAsync(string Guid, bool flag) {
            return base.Channel.getCompanyIDByUserAsync(Guid, flag);
        }
        
        public int[] getCompanyIDByUserID(string userName, string token) {
            return base.Channel.getCompanyIDByUserID(userName, token);
        }
        
        public System.Threading.Tasks.Task<int[]> getCompanyIDByUserIDAsync(string userName, string token) {
            return base.Channel.getCompanyIDByUserIDAsync(userName, token);
        }
        
        public void ValidateGuid(string guid) {
            base.Channel.ValidateGuid(guid);
        }
        
        public System.Threading.Tasks.Task ValidateGuidAsync(string guid) {
            return base.Channel.ValidateGuidAsync(guid);
        }
        
        public string GetUserByGUID(string Guid) {
            return base.Channel.GetUserByGUID(Guid);
        }
        
        public System.Threading.Tasks.Task<string> GetUserByGUIDAsync(string Guid) {
            return base.Channel.GetUserByGUIDAsync(Guid);
        }
        
        public int[] GetGroupIDByUserName(string userName, string token) {
            return base.Channel.GetGroupIDByUserName(userName, token);
        }
        
        public System.Threading.Tasks.Task<int[]> GetGroupIDByUserNameAsync(string userName, string token) {
            return base.Channel.GetGroupIDByUserNameAsync(userName, token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IProxy")]
    public interface IProxy {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetProtyByID", ReplyAction="http://tempuri.org/IProxy/GetProtyByIDResponse")]
        WCFClient.ServiceReference1.ProxyInfo GetProtyByID(int ProxyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetProtyByID", ReplyAction="http://tempuri.org/IProxy/GetProtyByIDResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo> GetProtyByIDAsync(int ProxyID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/AddProxy", ReplyAction="http://tempuri.org/IProxy/AddProxyResponse")]
        void AddProxy(WCFClient.ServiceReference1.ProxyInfo[] list, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/AddProxy", ReplyAction="http://tempuri.org/IProxy/AddProxyResponse")]
        System.Threading.Tasks.Task AddProxyAsync(WCFClient.ServiceReference1.ProxyInfo[] list, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/ModifyProxy", ReplyAction="http://tempuri.org/IProxy/ModifyProxyResponse")]
        void ModifyProxy(WCFClient.ServiceReference1.ProxyInfo value, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/ModifyProxy", ReplyAction="http://tempuri.org/IProxy/ModifyProxyResponse")]
        System.Threading.Tasks.Task ModifyProxyAsync(WCFClient.ServiceReference1.ProxyInfo value, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/UpdateByID", ReplyAction="http://tempuri.org/IProxy/UpdateByIDResponse")]
        void UpdateByID(WCFClient.ServiceReference1.ProxyInfo[] proxyInfo, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/UpdateByID", ReplyAction="http://tempuri.org/IProxy/UpdateByIDResponse")]
        System.Threading.Tasks.Task UpdateByIDAsync(WCFClient.ServiceReference1.ProxyInfo[] proxyInfo, string opname, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetEndDate", ReplyAction="http://tempuri.org/IProxy/GetEndDateResponse")]
        WCFClient.ServiceReference1.ProxyInfo GetEndDate(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetEndDate", ReplyAction="http://tempuri.org/IProxy/GetEndDateResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo> GetEndDateAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetPopedom", ReplyAction="http://tempuri.org/IProxy/GetPopedomResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetPopedom(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetPopedom", ReplyAction="http://tempuri.org/IProxy/GetPopedomResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetPopedomAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAppPopedom", ReplyAction="http://tempuri.org/IProxy/GetAppPopedomResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetAppPopedom(string appName, string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAppPopedom", ReplyAction="http://tempuri.org/IProxy/GetAppPopedomResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAppPopedomAsync(string appName, string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUser", ReplyAction="http://tempuri.org/IProxy/GetAllByUserResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetAllByUser(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUser", ReplyAction="http://tempuri.org/IProxy/GetAllByUserResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAllByUserAsync(string proxyUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUserNew", ReplyAction="http://tempuri.org/IProxy/GetAllByUserNewResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetAllByUserNew(string proxyUser, string ProxyedUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetAllByUserNew", ReplyAction="http://tempuri.org/IProxy/GetAllByUserNewResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAllByUserNewAsync(string proxyUser, string ProxyedUser, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportPopedom", ReplyAction="http://tempuri.org/IProxy/GetReportPopedomResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetReportPopedom(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportPopedom", ReplyAction="http://tempuri.org/IProxy/GetReportPopedomResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetReportPopedomAsync(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportByAgent", ReplyAction="http://tempuri.org/IProxy/GetReportByAgentResponse")]
        WCFClient.ServiceReference1.ProxyInfo[] GetReportByAgent(System.DateTime startDate, System.DateTime endDate, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetReportByAgent", ReplyAction="http://tempuri.org/IProxy/GetReportByAgentResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetReportByAgentAsync(System.DateTime startDate, System.DateTime endDate, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProxyChannel : WCFClient.ServiceReference1.IProxy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IProxy>, WCFClient.ServiceReference1.IProxy {
        
        public ProxyClient() {
        }
        
        public ProxyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProxyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.ProxyInfo GetProtyByID(int ProxyID, string guid) {
            return base.Channel.GetProtyByID(ProxyID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo> GetProtyByIDAsync(int ProxyID, string guid) {
            return base.Channel.GetProtyByIDAsync(ProxyID, guid);
        }
        
        public void AddProxy(WCFClient.ServiceReference1.ProxyInfo[] list, string opname, string guid) {
            base.Channel.AddProxy(list, opname, guid);
        }
        
        public System.Threading.Tasks.Task AddProxyAsync(WCFClient.ServiceReference1.ProxyInfo[] list, string opname, string guid) {
            return base.Channel.AddProxyAsync(list, opname, guid);
        }
        
        public void ModifyProxy(WCFClient.ServiceReference1.ProxyInfo value, string opname, string guid) {
            base.Channel.ModifyProxy(value, opname, guid);
        }
        
        public System.Threading.Tasks.Task ModifyProxyAsync(WCFClient.ServiceReference1.ProxyInfo value, string opname, string guid) {
            return base.Channel.ModifyProxyAsync(value, opname, guid);
        }
        
        public void UpdateByID(WCFClient.ServiceReference1.ProxyInfo[] proxyInfo, string opname, string guid) {
            base.Channel.UpdateByID(proxyInfo, opname, guid);
        }
        
        public System.Threading.Tasks.Task UpdateByIDAsync(WCFClient.ServiceReference1.ProxyInfo[] proxyInfo, string opname, string guid) {
            return base.Channel.UpdateByIDAsync(proxyInfo, opname, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo GetEndDate(string proxyUser, string guid) {
            return base.Channel.GetEndDate(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo> GetEndDateAsync(string proxyUser, string guid) {
            return base.Channel.GetEndDateAsync(proxyUser, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetPopedom(string proxyUser, string guid) {
            return base.Channel.GetPopedom(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetPopedomAsync(string proxyUser, string guid) {
            return base.Channel.GetPopedomAsync(proxyUser, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetAppPopedom(string appName, string proxyUser, string guid) {
            return base.Channel.GetAppPopedom(appName, proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAppPopedomAsync(string appName, string proxyUser, string guid) {
            return base.Channel.GetAppPopedomAsync(appName, proxyUser, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetAllByUser(string proxyUser, string guid) {
            return base.Channel.GetAllByUser(proxyUser, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAllByUserAsync(string proxyUser, string guid) {
            return base.Channel.GetAllByUserAsync(proxyUser, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetAllByUserNew(string proxyUser, string ProxyedUser, string guid) {
            return base.Channel.GetAllByUserNew(proxyUser, ProxyedUser, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetAllByUserNewAsync(string proxyUser, string ProxyedUser, string guid) {
            return base.Channel.GetAllByUserNewAsync(proxyUser, ProxyedUser, guid);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetReportPopedom(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token) {
            return base.Channel.GetReportPopedom(createDate, endCreatDate, token);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetReportPopedomAsync(System.Nullable<System.DateTime> createDate, System.Nullable<System.DateTime> endCreatDate, string token) {
            return base.Channel.GetReportPopedomAsync(createDate, endCreatDate, token);
        }
        
        public WCFClient.ServiceReference1.ProxyInfo[] GetReportByAgent(System.DateTime startDate, System.DateTime endDate, string guid) {
            return base.Channel.GetReportByAgent(startDate, endDate, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ProxyInfo[]> GetReportByAgentAsync(System.DateTime startDate, System.DateTime endDate, string guid) {
            return base.Channel.GetReportByAgentAsync(startDate, endDate, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Login", ReplyAction="http://tempuri.org/IUser/LoginResponse")]
        WCFClient.ServiceReference1.UserInfo Login(string password, string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Login", ReplyAction="http://tempuri.org/IUser/LoginResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo> LoginAsync(string password, string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ActingLogin", ReplyAction="http://tempuri.org/IUser/ActingLoginResponse")]
        WCFClient.ServiceReference1.UserInfo ActingLogin(string password, string loginName, string actingLoginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ActingLogin", ReplyAction="http://tempuri.org/IUser/ActingLoginResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo> ActingLoginAsync(string password, string loginName, string actingLoginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAll", ReplyAction="http://tempuri.org/IUser/GetAllResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetAll(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAll", ReplyAction="http://tempuri.org/IUser/GetAllResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllNew", ReplyAction="http://tempuri.org/IUser/GetAllNewResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetAllNew(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllNew", ReplyAction="http://tempuri.org/IUser/GetAllNewResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllNewAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllWithDeleted", ReplyAction="http://tempuri.org/IUser/GetAllWithDeletedResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetAllWithDeleted(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetAllWithDeleted", ReplyAction="http://tempuri.org/IUser/GetAllWithDeletedResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllWithDeletedAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByName", ReplyAction="http://tempuri.org/IUser/GetUserByNameResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetUserByName(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByName", ReplyAction="http://tempuri.org/IUser/GetUserByNameResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserByNameAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUser", ReplyAction="http://tempuri.org/IUser/GetUserResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetUser(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUser", ReplyAction="http://tempuri.org/IUser/GetUserResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserAsync(string userName, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add", ReplyAction="http://tempuri.org/IUser/AddResponse")]
        void Add(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Add", ReplyAction="http://tempuri.org/IUser/AddResponse")]
        System.Threading.Tasks.Task AddAsync(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Modify", ReplyAction="http://tempuri.org/IUser/ModifyResponse")]
        void Modify(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Modify", ReplyAction="http://tempuri.org/IUser/ModifyResponse")]
        System.Threading.Tasks.Task ModifyAsync(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Delete", ReplyAction="http://tempuri.org/IUser/DeleteResponse")]
        void Delete(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Delete", ReplyAction="http://tempuri.org/IUser/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Close", ReplyAction="http://tempuri.org/IUser/CloseResponse")]
        void Close(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/Close", ReplyAction="http://tempuri.org/IUser/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync(WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetModulePermissions", ReplyAction="http://tempuri.org/IUser/GetModulePermissionsResponse")]
        WCFClient.ServiceReference1.ModulePermissionInfo[] GetModulePermissions(string appName, string appVersion, WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetModulePermissions", ReplyAction="http://tempuri.org/IUser/GetModulePermissionsResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModulePermissionInfo[]> GetModulePermissionsAsync(string appName, string appVersion, WCFClient.ServiceReference1.UserInfo value, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByApp", ReplyAction="http://tempuri.org/IUser/GetUserByAppResponse")]
        WCFClient.ServiceReference1.UserInfo[] GetUserByApp(int applicationID, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetUserByApp", ReplyAction="http://tempuri.org/IUser/GetUserByAppResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserByAppAsync(int applicationID, string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : WCFClient.ServiceReference1.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IUser>, WCFClient.ServiceReference1.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.UserInfo Login(string password, string loginName) {
            return base.Channel.Login(password, loginName);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo> LoginAsync(string password, string loginName) {
            return base.Channel.LoginAsync(password, loginName);
        }
        
        public WCFClient.ServiceReference1.UserInfo ActingLogin(string password, string loginName, string actingLoginName) {
            return base.Channel.ActingLogin(password, loginName, actingLoginName);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo> ActingLoginAsync(string password, string loginName, string actingLoginName) {
            return base.Channel.ActingLoginAsync(password, loginName, actingLoginName);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetAll(string guid) {
            return base.Channel.GetAll(guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllAsync(string guid) {
            return base.Channel.GetAllAsync(guid);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetAllNew(string guid) {
            return base.Channel.GetAllNew(guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllNewAsync(string guid) {
            return base.Channel.GetAllNewAsync(guid);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetAllWithDeleted(string guid) {
            return base.Channel.GetAllWithDeleted(guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetAllWithDeletedAsync(string guid) {
            return base.Channel.GetAllWithDeletedAsync(guid);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetUserByName(string userName, string guid) {
            return base.Channel.GetUserByName(userName, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserByNameAsync(string userName, string guid) {
            return base.Channel.GetUserByNameAsync(userName, guid);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetUser(string userName, string guid) {
            return base.Channel.GetUser(userName, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserAsync(string userName, string guid) {
            return base.Channel.GetUserAsync(userName, guid);
        }
        
        public void Add(WCFClient.ServiceReference1.UserInfo value, string guid) {
            base.Channel.Add(value, guid);
        }
        
        public System.Threading.Tasks.Task AddAsync(WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.AddAsync(value, guid);
        }
        
        public void Modify(WCFClient.ServiceReference1.UserInfo value, string guid) {
            base.Channel.Modify(value, guid);
        }
        
        public System.Threading.Tasks.Task ModifyAsync(WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.ModifyAsync(value, guid);
        }
        
        public void Delete(WCFClient.ServiceReference1.UserInfo value, string guid) {
            base.Channel.Delete(value, guid);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.DeleteAsync(value, guid);
        }
        
        public void Close(WCFClient.ServiceReference1.UserInfo value, string guid) {
            base.Channel.Close(value, guid);
        }
        
        public System.Threading.Tasks.Task CloseAsync(WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.CloseAsync(value, guid);
        }
        
        public WCFClient.ServiceReference1.ModulePermissionInfo[] GetModulePermissions(string appName, string appVersion, WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.GetModulePermissions(appName, appVersion, value, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.ModulePermissionInfo[]> GetModulePermissionsAsync(string appName, string appVersion, WCFClient.ServiceReference1.UserInfo value, string guid) {
            return base.Channel.GetModulePermissionsAsync(appName, appVersion, value, guid);
        }
        
        public WCFClient.ServiceReference1.UserInfo[] GetUserByApp(int applicationID, string token) {
            return base.Channel.GetUserByApp(applicationID, token);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.UserInfo[]> GetUserByAppAsync(int applicationID, string token) {
            return base.Channel.GetUserByAppAsync(applicationID, token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthorizedLog")]
    public interface IAuthorizedLog {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoList", ReplyAction="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoListResponse")]
        WCFClient.ServiceReference1.AuthorizedLogInfo[] GetAuthorizedLogInfoList(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoList", ReplyAction="http://tempuri.org/IAuthorizedLog/GetAuthorizedLogInfoListResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.AuthorizedLogInfo[]> GetAuthorizedLogInfoListAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthorizedLogChannel : WCFClient.ServiceReference1.IAuthorizedLog, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizedLogClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IAuthorizedLog>, WCFClient.ServiceReference1.IAuthorizedLog {
        
        public AuthorizedLogClient() {
        }
        
        public AuthorizedLogClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthorizedLogClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizedLogClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthorizedLogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.AuthorizedLogInfo[] GetAuthorizedLogInfoList(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid) {
            return base.Channel.GetAuthorizedLogInfoList(startDate, endDate, userName, operatorName, roleID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.AuthorizedLogInfo[]> GetAuthorizedLogInfoListAsync(System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string userName, string operatorName, System.Nullable<int> roleID, string guid) {
            return base.Channel.GetAuthorizedLogInfoListAsync(startDate, endDate, userName, operatorName, roleID, guid);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMenu")]
    public interface IMenu {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenu/GetMenuByModuleName", ReplyAction="http://tempuri.org/IMenu/GetMenuByModuleNameResponse")]
        WCFClient.ServiceReference1.MenuInfo GetMenuByModuleName(int moduleID, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenu/GetMenuByModuleName", ReplyAction="http://tempuri.org/IMenu/GetMenuByModuleNameResponse")]
        System.Threading.Tasks.Task<WCFClient.ServiceReference1.MenuInfo> GetMenuByModuleNameAsync(int moduleID, string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMenuChannel : WCFClient.ServiceReference1.IMenu, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MenuClient : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IMenu>, WCFClient.ServiceReference1.IMenu {
        
        public MenuClient() {
        }
        
        public MenuClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MenuClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MenuClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MenuClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClient.ServiceReference1.MenuInfo GetMenuByModuleName(int moduleID, string guid) {
            return base.Channel.GetMenuByModuleName(moduleID, guid);
        }
        
        public System.Threading.Tasks.Task<WCFClient.ServiceReference1.MenuInfo> GetMenuByModuleNameAsync(int moduleID, string guid) {
            return base.Channel.GetMenuByModuleNameAsync(moduleID, guid);
        }
    }
}
